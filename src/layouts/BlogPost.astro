---
import type { CollectionEntry } from 'astro:content';
import BaseLayout from './BaseLayout.astro';
import FormattedDate from '@/components/FormattedDate.astro';
import { getLangFromUrl, useTranslations } from '@/utils/i18n';

type Props = CollectionEntry<'blog'>['data'] & {
  readingTime?: number;
};

const { title, description, pubDate, updatedDate, heroImage, tags = [], author, readingTime } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<BaseLayout title={title} description={description} image={heroImage}>
  <article class="blog-post">
    <div class="container">
      <div class="post-header">
        <a href={lang === 'en' ? '/blog/' : `/${lang}/blog/`} class="back-link">
          {t('blog.backToBlog')}
        </a>
        
        {heroImage && (
          <div class="hero-image">
            <img
              src={heroImage}
              alt={title}
              loading="eager"
              decoding="async"
            />
          </div>
        )}
        
        <header class="post-meta">
          <h1 class="post-title">{title}</h1>
          <p class="post-description">{description}</p>
          
          <div class="post-info">
            <div class="date-info">
              <time datetime={pubDate.toISOString()}>
                {t('blog.publishedOn')} <FormattedDate date={pubDate} />
              </time>
              {updatedDate && (
                <time datetime={updatedDate.toISOString()} class="updated">
                  {t('blog.updatedOn')} <FormattedDate date={updatedDate} />
                </time>
              )}
            </div>
            
            <div class="meta-info">
              <span class="author">{author}</span>
              {readingTime && (
                <span class="reading-time">
                  {readingTime} {t('blog.readingTime')}
                </span>
              )}
            </div>
          </div>
          
          {tags.length > 0 && (
            <div class="tags">
              {tags.map((tag) => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          )}
        </header>
      </div>
      
      <div class="post-content prose">
        <slot />
      </div>
    </div>
  </article>
</BaseLayout>

<style>
  .blog-post {
    padding: 2rem 0;
  }

  .post-header {
    margin-bottom: 3rem;
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    color: var(--color-text-light);
    text-decoration: none;
    font-size: 0.9rem;
    margin-bottom: 2rem;
    padding: 0.5rem 0;
    transition: color 0.2s ease;
  }

  .back-link:hover {
    color: var(--color-primary);
  }

  .hero-image {
    margin-bottom: 2rem;
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow-lg);
  }

  .hero-image img {
    width: 100%;
    height: 400px;
    object-fit: cover;
    display: block;
  }

  .post-title {
    font-size: 3rem;
    font-weight: 800;
    line-height: 1.1;
    margin-bottom: 1rem;
    background: linear-gradient(135deg, var(--color-text) 0%, var(--color-primary) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .post-description {
    font-size: 1.25rem;
    color: var(--color-text-light);
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }

  .post-info {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1.5rem;
    gap: 2rem;
  }

  .date-info {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .date-info time {
    font-size: 0.875rem;
    color: var(--color-text-muted);
  }

  .date-info .updated {
    font-style: italic;
  }

  .meta-info {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 0.25rem;
  }

  .author {
    font-size: 0.875rem;
    color: var(--color-text-light);
    font-weight: 600;
  }

  .reading-time {
    font-size: 0.875rem;
    color: var(--color-text-muted);
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background: var(--color-primary-light);
    color: var(--color-primary-dark);
    padding: 0.25rem 0.75rem;
    border-radius: var(--radius-md);
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .post-content {
    margin: 0 auto;
  }

  .post-content :global(h1),
  .post-content :global(h2),
  .post-content :global(h3) {
    color: var(--color-text);
    position: relative;
  }

  .post-content :global(h2) {
    font-size: 1.875rem;
    margin-top: 3rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--color-border);
  }

  .post-content :global(h3) {
    font-size: 1.5rem;
    margin-top: 2.5rem;
  }

  .post-content :global(img) {
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-md);
    margin: 2rem auto;
    max-width: 100%;
    height: auto;
  }

  .post-content :global(.highlight) {
    background: linear-gradient(120deg, var(--color-accent) 0%, var(--color-accent) 100%);
    background-repeat: no-repeat;
    background-size: 100% 0.2em;
    background-position: 0 88%;
    padding: 0 0.2em;
  }

  @media (max-width: 768px) {
    .post-title {
      font-size: 2.25rem;
    }

    .post-description {
      font-size: 1.125rem;
    }

    .post-info {
      flex-direction: column;
      gap: 1rem;
    }

    .meta-info {
      align-items: flex-start;
    }

    .hero-image img {
      height: 250px;
    }

    .blog-post {
      padding: 1rem 0;
    }

    .post-header {
      margin-bottom: 2rem;
    }
  }
</style>